import {
    addAccountDetailsToBuffer, createExecuteMultipleFunctionsFunction, createSendMessageAndSetNexCommandFunction,
    createValidateAndTryAgainFunction,
    displayPrice,
    getFileIdOfPhotoOrDocument,
    sendUserData
} from "./processingTools.js";
import {processingTextCommands} from "./processingTextCommands.js";
import {chatbotManagement} from "./chatbotManagement.js";
import {isNumber} from "../tools/tools.js";
import {bot} from "./bot.js";
import {chooseYesOrNoOptions} from "./options.js";
import {processingButton} from "./processingButton.js";
import {doc} from "../tools/googleSpreadsheets/googleSpreadsheets.js";

const commands = {
    textCommand: processingTextCommands,

    userNameDetails: createExecuteMultipleFunctionsFunction(
        addAccountDetailsToBuffer,
        createSendMessageAndSetNexCommandFunction('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ—à–µ–ª—å–∫–∞:', 'accountDetails')
    ),

    accountDetails: createExecuteMultipleFunctionsFunction(
        addAccountDetailsToBuffer,
        createSendMessageAndSetNexCommandFunction('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∞–Ω–µ–π (¬•), –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:',
            'validatePrice')
    ),
    validatePrice: createValidateAndTryAgainFunction('accountDetails', '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º‚ùó', 'calcPrice',
        function (userData) {
            return isNumber(userData.text)
        }),

    calcPrice: async function (userData, price = undefined) {
        chatbotManagement[userData.from.id].buffer.courseAlmaz = chatbotManagement.almaz.courseAlmaz
        chatbotManagement[userData.from.id].buffer.courseForPeople = chatbotManagement.almaz.courseForPeople
        if (price === undefined) await displayPrice(userData.from.id, userData.text)
        else await displayPrice(userData.from.id, price)
    },

    moneyTransfer: createSendMessageAndSetNexCommandFunction('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:',
        'validateScreenshot'),
    validateScreenshot: createValidateAndTryAgainFunction('moneyTransfer', '–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç‚ùóÔ∏è', 'screenshot',
        function (userData) {
            chatbotManagement[userData.from.id].buffer.screenshotId = getFileIdOfPhotoOrDocument(userData)
            return userData.document || userData.photo
        }),

    screenshot: async function (userData) {
        chatbotManagement[userData.from.id].command = 'textCommand'

        if (chatbotManagement[userData.from.id].buffer.courseAlmaz === chatbotManagement.almaz.courseAlmaz ||
            chatbotManagement[userData.from.id].buffer.courseForPeople === chatbotManagement.almaz.courseForPeople) {
            await bot.sendMessage(userData.from.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É üôÇ\n\n' +
                '<em>–Æ–∞–Ω–∏ –ø–æ—Å—Ç—É–ø—è—Ç –∫ –≤–∞–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—á—ë—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</em>', {parse_mode: 'HTML'})

            await sendUserData(userData.from.id)
        } else {
            await bot.sendMessage(userData.from.id, '–ö—É—Ä—Å —Ä—É–±–ª—è –ø–æ–º–µ–Ω—è–ª—Å—è, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:')
            await this.calcPrice(userData, chatbotManagement[userData.from.id].buffer.priceYen)
        }
        chatbotManagement.clearBuffer(userData.from.id)
    },

    start: async function (userData) {
        await bot.sendMessage(userData.from.id, `–ö—É—Ä—Å –¥–ª—è —Ç–µ–±—è: ${chatbotManagement.almaz.courseAlmaz}\n–ö—É—Ä—Å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ–≤: ${chatbotManagement.almaz.courseForPeople}`)
        await bot.sendMessage(userData.from.id, '–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å?\n–ï—Å–ª–∏ –¥–∞ - –Ω–∞–∂–º–∏—Ç–µ "–î–ê"\n–ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–∂–º–∏—Ç–µ "–ù–ï–¢"', chooseYesOrNoOptions)
        chatbotManagement[userData.from.id].command = 'textCommand'
    },
    courseForPeople: async function (userData, notCheckNumber = false) {
        if (isNumber(userData.text) || notCheckNumber) {
            if (!notCheckNumber) chatbotManagement.almaz.courseForPeople = userData.text
            chatbotManagement[userData.from.id].command = 'courseAlmaz'
            await bot.sendMessage(userData.from.id, '–ö—É—Ä—Å (¬• -> ‚ÇΩ, –î–ª—è –ú–µ–Ω—è)')
        } else {
            await bot.sendMessage(userData.from.id, '–ü–ò–®–ò –¶–ò–§–ï–†–ö–ò –ß–ï–†–ï–ó ‚úÖ–¢–û–ß–ö–£ (.)‚úÖ, ‚ùå–ó–ê–ü–Ø–¢–´–ï (,)‚ùå –ù–ï –†–ê–ë–û–¢–ê–Æ–¢')
            chatbotManagement[userData.from.id].command = 'textCommand'
            userData.data = 'YESButton'
            await processingButton(userData)
        }
    },
    courseAlmaz: async function (userData) {
        if (isNumber(userData.text)) {
            chatbotManagement.almaz.courseAlmaz = userData.text

            const sheet = await doc.sheetCourse()
            await sheet.addToRow(0, {
                '–ö—É—Ä—Å (¬• -> ‚ÇΩ, –î–ª—è –†—É—Å—Å–∫–æ–≥–æ –ö–ª–∏–µ–Ω—Ç–∞)': chatbotManagement.almaz.courseForPeople,
                '–ö—É—Ä—Å (¬• -> ‚ÇΩ, –î–ª—è –ú–µ–Ω—è)': chatbotManagement.almaz.courseAlmaz,
            })

            await createSendMessageAndSetNexCommandFunction('–ì–æ—Ç–æ–≤–æ, –∫—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã',
                'start')(userData)
            await processingCommand(userData)
        } else {
            await bot.sendMessage(userData.from.id, '–ü–ò–®–ò –¶–ò–§–ï–†–ö–ò –ß–ï–†–ï–ó ‚úÖ–¢–û–ß–ö–£ (.)‚úÖ, ‚ùå–ó–ê–ü–Ø–¢–´–ï (,)‚ùå –ù–ï –†–ê–ë–û–¢–ê–Æ–¢')
            await this.courseForPeople(userData, true)
        }
    },
}


export async function processingCommand(msg) {
    if (await processingTextCommands(msg, false)) return
    if (chatbotManagement[msg.from.id].command in commands) await commands[chatbotManagement[msg.from.id].command](msg)
    else await processingTextCommands(msg)
}